{"version":3,"sources":["graph-utils.js","DataPanel.js","HoverPanel.js","bellman-ford-ui.js","App.js","serviceWorker.js","index.js"],"names":["GRAPH_OPTIONS","interaction","hover","multiselect","nodes","color","background","border","highlight","font","size","edges","length","physics","enabled","hierarchicalRepulsion","nodeDistance","springLength","augmentNodeDate","nodeData","map","node","weight","is_source_node","Infinity","shortest_source","label","undefined","augmentEdgeData","edgeData","edge","cost","toString","highlightShortestPath","relaxedNode","isPartOfShortestPath","find","n","id","to","from","renderSelectedData","selectedObject","style","backgroundColor","textDecoration","data","className","renderSelectedNodeData","e","renderSelectedEdges","DataPanel","HoverPanel","hoverData","type","renderHoverPanel","bellmanFordNetwork","relaxedNodes","i","forEach","currentNode","currentNodeEdge","filter","destinationNode","App","useState","networkData","setNodeData","setEdgeData","React","updateState","useCallback","setSelectedObject","setHoverData","useEffect","bfResults","events","select","event","includes","hoverNode","hoveredNode","hoverEdge","hoveredEdge","onMouseOver","graph","options","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dce96b51.chunk.js","sourcesContent":["const node_background = '#008ac9';\nconst node_border = '#6488db';\nconst node_highlight_bg = '#006c9e';\nconst node_highlight_border = '#ffffff';\nconst node_hover_bg = '#006c9e';\nconst node_font_color = '#ffffff';\n\nconst edge_color = '#ffffff';\nconst edge_font_color = '#ffffff';\nconst edge_highlight_color = '#008ac9';\nconst edge_hover_color = '#ffffff';\n\nconst shortest_path_color = '#ff6f7a';\n\nexport const GRAPH_OPTIONS = {\n  interaction: { hover:true, multiselect: true },\n  nodes: {\n    color: {\n      background: node_background,\n      border: node_border,\n      highlight: {\n        background: node_highlight_bg,\n        border: node_highlight_border\n      },\n      hover: node_hover_bg\n    },\n    font: {\n      size: 16,\n      color: node_font_color,\n    }\n  },\n  edges: {\n    font: {\n      color: edge_font_color,\n      size: 18\n    },\n    color: {\n      color: edge_color,\n      highlight: edge_highlight_color,\n      hover: edge_hover_color,\n    },\n    length: 200\n  },\n  physics: {\n    enabled: true,\n    hierarchicalRepulsion: {\n      nodeDistance: 400,\n      springLength: 500,\n    },\n  }\n};\n\nexport const augmentNodeDate = (nodeData) => nodeData.map(node => ({\n  ...node,\n  weight: node.is_source_node ? 0 : Infinity,\n  shortest_source: node.is_source_node ? node.label : undefined,\n  color: node.is_source_node ? '#ff0000' : undefined\n}));\n\nexport const augmentEdgeData = (edgeData) => edgeData.map(edge => ({\n  ...edge,\n  label: edge.cost.toString(),\n}));\n\nexport const highlightShortestPath = (edgeData, relaxedNode) => {\n  return edgeData.map(edge => {\n    let isPartOfShortestPath = false;\n    const destinationNode = relaxedNode.find(n => n.id === edge.to);\n    // If the destination node (to) has the same shortest_source (from) as the edge.\n    // Then this edge (to - from) is on the shortest network path.\n    if (destinationNode.shortest_source === edge.from) {\n      isPartOfShortestPath = true;\n    }\n\n    return {\n      ...edge,\n      isPartOfShortestPath,\n      color: isPartOfShortestPath ? shortest_path_color : undefined\n    }\n  })\n};\n\nexport const getNodeEdgeData = (nodeId, edgeData) => edgeData.filter(e => e.from === nodeId);\n\nexport default {\n  getNodeEdgeData,\n  augmentNodeDate,\n  augmentEdgeData,\n  highlightShortestPath,\n  GRAPH_OPTIONS\n};","import React from \"react\";\nimport { getNodeEdgeData } from './graph-utils';\n\n// const renderNetworkData = (nodeData, edgeData) => {\n//   return (\n//     <div id='network-data'>\n//       *Lists the [Node-Weight] and its (Edge, Cost)\n//       {nodeData.map(node => {\n//         const nodeEdgeData = getNodeEdgeData(node.id, edgeData);\n//         const nodeWeight = isFinite(node.weight) ? node.weight : 'Inf';\n//         return (<div className='node-listing'>[{node.id} - {nodeWeight} ]: {\n//           nodeEdgeData.map(e => (<div className='edge-listing'>\n//             ({e.from}:{e.to}, {e.cost})\n//           </div>))\n//         }</div>)\n//       })}\n//     </div>\n//   )\n// };\n\nconst renderSelectedNodeData = (nodeData) => {\n  if (nodeData.length === 0 ) {\n    return null;\n  }\n\n  return (<div className='selected-data-nodes'>\n    <div className='selected-title'>Nodes</div>\n    {nodeData.map(n => (\n      <div className='selected-object'>\n        <div>Node ID: <span>{n.id}</span></div>\n        <div>Label: <span>{n.label}</span></div>\n        <div>Weight: <span>{n.weight}</span></div>\n        <div>Shortest Source: <span>{n.shortest_source} </span></div>\n        <hr/>\n      </div>\n    ))}\n  </div>)\n};\n\nconst renderSelectedEdges = (edgeData) => {\n  if (edgeData.length === 0 ) {\n    return null;\n  }\n\n  return (<div className='selected-data-edges'>\n    <div className='selected-title'>Edges</div>\n    {edgeData.map(e => (\n      <div className='selected-object'>\n        <div>Edge ID: <span>{e.id}</span></div>\n        <div>From: <span>{e.to}</span></div>\n        <div>To: <span>{e.to}</span></div>\n        <div>In Shortest Network: <span>{e.isPartOfShortestPath ? 'Yes' : 'No'} </span></div>\n        <div>Cost: <span>{e.cost} </span></div>\n        <hr/>\n      </div>\n    ))}\n  </div>)\n};\n\nconst renderSelectedData = (nodeData, edgeData, selectedObject) => {\n  if (!selectedObject) {\n    return (<div id='selected-object-data'>\n      <div id='select-instructions'>\n        Select a node/edge to view its data.\n      <br/>\n        (You can select multiple nodes/edges by holding down control/cmd and clicking)\n      <br/><br/>\n        Shortest network path will be highlighted in <span style={{color: '#ff6f7a'}}>pink</span>, source node will be highlighted in\n        <span style={{color: '#ff0000'}}> red</span>\n      <br/><br/>\n        Non shortest path edges will be displayed in\n        <span style={{color: '#ffffff', backgroundColor: '#2d3436'}}> white</span> and in\n        <span style={{color: '#008ac9' }}> blue</span> when selected.\n      <hr/>\n        Or click <span style={{textDecoration: 'line-through'}}>here</span> to add/modify the network data JSON. (TODO)\n      <br/><br/>\n        *Note: Bellman-Ford is automatically ran on adding/modifying the network JSON data above.\n      </div>\n    </div>)\n  }\n\n  const { nodes, edges } = selectedObject.data;\n\n  return (\n    <div id='selected-object-data'>\n      {renderSelectedNodeData(nodes)}\n      {renderSelectedEdges(edges)}\n    </div>\n  )\n};\n\nexport const DataPanel = ({ nodeData, edgeData, selectedObject }) => {\n  return(\n    <div id='data-panel-wrapper'>\n      {/*<div className='title'>Current Network Data</div>*/}\n      {/*{renderNetworkData(nodeData, edgeData)}*/}\n      <div className='title'>Network Info</div>\n      {renderSelectedData(nodeData, edgeData, selectedObject)}\n    </div>\n  )\n};\n\nexport default DataPanel;","import React from \"react\";\n\nconst renderHoverPanel = ({ type, id, ...data }) => {\n  if (type === 'node') {\n    return (\n      <div className='data'>\n        <div>Node ID: <span>{id}</span></div>\n        <div>Label: <span>{data.label}</span></div>\n        <div>Weight: <span>{data.weight}</span></div>\n        <div>Shortest Source: <span>{data.shortest_source} </span></div>\n      </div>\n    )\n  }\n\n  if (type === 'edge') {\n    return (\n      <div className='data'>\n        <div>Edge ID: <span>{id}</span></div>\n        <div>From: <span>{data.to}</span></div>\n        <div>To: <span>{data.to}</span></div>\n        <div>In Shortest Network: <span>{data.isPartOfShortestPath ? 'Yes' : 'No'} </span></div>\n        <div>Cost: <span>{data.cost} </span></div>\n      </div>\n    )\n  }\n};\n\nexport const HoverPanel = ({hoverData}) => {\n  if (hoverData === undefined) {\n    return null;\n  }\n\n  return (\n    <div id='hover-data-panel'>\n      {renderHoverPanel(hoverData)}\n    </div>\n  )\n};\n\nexport default HoverPanel;","/*\n  Bellman-Ford algorithm.\n  Ensure that networkData is an object of the following shape for the implementation to work\n\n  // Contains data on all the nodes in the networks\n  @param nodes = Array<node>\n    node = {\n      \"id\": String,\n      \"label\": String\n      \"weight\": Number/Infinity,\n      \"shortest_source\": String<node.id>,\n    }\n\n  @param edges = Array<edge>\n    edge = {\n      \"from\": node.id\n      \"to\": node.id,\n      \"cost\": Number\n    }\n\n    @return: Returns a new array of nodes with their updated weight and shortest path source.\n*/\nexport const bellmanFordNetwork = (nodeData, edgeData) => {\n  // Copy construct a new network to prevent mutating the original network.\n  let relaxedNodes = [ ...nodeData].map(i => ({ ...i}));\n\n  // Main algorithm loop.\n  for(let i=0; i < relaxedNodes.length - 1; i++ ) {\n    relaxedNodes.forEach(currentNode => {\n      const currentNodeEdge = edgeData.filter(e => e.from === currentNode.id);\n      if (currentNodeEdge.length > 0) {\n        currentNodeEdge.forEach(edge => {\n          const destinationNode = relaxedNodes.find(n => n.id === edge.to);\n          if (currentNode.weight + edge.cost < destinationNode.weight) {\n            destinationNode.weight = currentNode.weight + edge.cost;\n            destinationNode.shortest_source = currentNode.id;\n          }\n        })\n      }\n    });\n  }\n\n  return relaxedNodes;\n};\n\nexport default bellmanFordNetwork;","import React, { useState, useEffect } from \"react\";\nimport Graph from \"react-graph-vis\";\nimport DataPanel from './DataPanel';\nimport HoverPanel from './HoverPanel';\nimport networkData from './test_data';\nimport { augmentEdgeData, augmentNodeDate, highlightShortestPath, GRAPH_OPTIONS } from './graph-utils';\nimport bellmanFordNetwork from './bellman-ford-ui';\n\n\n\nexport const App = () => {\n\n  const [nodeData, setNodeData] = useState(augmentNodeDate(networkData.nodes));\n  const [edgeData, setEdgeData] = useState(augmentEdgeData(networkData.edges));\n  const [, updateState] = React.useState();\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n\n  const [selectedObject, setSelectedObject] = useState(undefined);\n  const [hoverData, setHoverData] = useState(undefined);\n\n  useEffect(() => {\n    const bfResults = bellmanFordNetwork(nodeData, edgeData);\n    setNodeData(bfResults);\n    setEdgeData(highlightShortestPath(edgeData, bfResults));\n  }, []);\n\n  const events = {\n    select: (event) => {\n      const { nodes, edges } = event;\n      if (nodes.length > 0 || edges.length > 0) {\n        setSelectedObject({\n          data: {\n            nodes: nodeData.filter(n => nodes.includes(n.id)),\n            edges: edgeData.filter(e => edges.includes(e.id))\n          }\n        })\n        setHoverData(undefined);\n      } else {\n        setSelectedObject(undefined);\n      }\n    },\n    hoverNode: (event) => {\n      const { node } = event;\n      const hoveredNode = nodeData.find(n => n.id === node);\n      // console.log(`Hover Node: ${JSON.stringify(hoveredNode)}`);\n      setHoverData({\n        type: 'node',\n        ...hoveredNode\n      });\n    },\n    hoverEdge: (event) => {\n      const { edge } = event;\n      const hoveredEdge = edgeData.find(e => e.id === edge);\n      // console.log(`Hover Edge: ${JSON.stringify(edge)}`);\n      setHoverData({\n        type: 'edge',\n        ...hoveredEdge\n      })\n    }\n  };\n  return (\n    <div id='app-wrapper' onMouseOver={() => {\n      setHoverData(undefined);\n    }}>\n      <DataPanel\n        nodeData={nodeData}\n        edgeData={edgeData}\n        selectedObject={selectedObject}\n      />\n      <div id='graph-canvas-wrapper' >\n        <HoverPanel hoverData={hoverData} />\n        <Graph\n          graph={{ nodes: nodeData, edges: edgeData, }}\n          options={GRAPH_OPTIONS}\n          events={events}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}