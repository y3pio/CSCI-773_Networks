{"version":3,"sources":["DataPanel.js","HoverPanel.js","graph-utils.js","bellman-ford-ui.js","EditPanel.js","App.js","serviceWorker.js","index.js"],"names":["renderSelectedData","nodeData","edgeData","selectedObject","toggleEditMode","id","style","color","backgroundColor","onClick","data","nodes","edges","length","className","map","n","label","weight","shortest_source","renderSelectedNodeData","e","from","to","isPartOfShortestPath","cost","renderSelectedEdges","DataPanel","HoverPanel","hoverData","undefined","type","renderHoverPanel","GRAPH_OPTIONS","interaction","hover","multiselect","background","border","highlight","font","size","physics","enabled","hierarchicalRepulsion","nodeDistance","springLength","augmentNodeDate","node","is_source_node","Infinity","augmentEdgeData","edge","toString","highlightShortestPath","relaxedNode","find","bellmanFordNetwork","relaxedNodes","i","forEach","currentNode","currentNodeEdge","filter","destinationNode","example_node","example_edge","EditPanel","setNodeData","setEdgeData","useState","isValidJON","setIsValidJSON","name","isValid","validationStatus","setValidationStatus","useEffect","JSONtextArea","document","getElementById","validateNetworkData","value","networkData","inputValue","newJSONData","newValidation","uniqueNodes","sourceNode","toFromValid","JSON","parse","console","log","Array","isArray","every","_","src","s","newNodes","onChange","target","defaultValue","stringify","rows","newNodeData","newEdgeData","bfResults","disabled","App","editMode","setEditMode","setSelectedObject","setHoverData","events","select","event","includes","hoverNode","hoveredNode","hoverEdge","hoveredEdge","onMouseOver","Fragment","graph","options","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.379fcefc.chunk.js","sourcesContent":["import React from \"react\";\n\nconst renderSelectedNodeData = (nodeData) => {\n  if (nodeData.length === 0 ) {\n    return null;\n  }\n\n  return (<div className='selected-data-nodes'>\n    <div className='selected-title'>Nodes</div>\n    {nodeData.map(n => (\n      <div className='selected-object'>\n        <div>Node ID: <span>{n.id}</span></div>\n        <div>Label: <span>{n.label}</span></div>\n        <div>Weight: <span>{n.weight}</span></div>\n        <div>Shortest Source: <span>{n.shortest_source} </span></div>\n        <hr/>\n      </div>\n    ))}\n  </div>)\n};\n\nconst renderSelectedEdges = (edgeData) => {\n  if (edgeData.length === 0 ) {\n    return null;\n  }\n\n  return (<div className='selected-data-edges'>\n    <div className='selected-title'>Edges</div>\n    {edgeData.map(e => (\n      <div className='selected-object'>\n        <div>Edge ID: <span>{e.id}</span></div>\n        <div>From: <span>{e.from}</span></div>\n        <div>To: <span>{e.to}</span></div>\n        <div>In Shortest Network: <span>{e.isPartOfShortestPath ? 'Yes' : 'No'} </span></div>\n        <div>Cost: <span>{e.cost} </span></div>\n        <hr/>\n      </div>\n    ))}\n  </div>)\n};\n\nconst renderSelectedData = (nodeData, edgeData, selectedObject, toggleEditMode) => {\n  if (!selectedObject) {\n    return (<div id='selected-object-data'>\n      <div id='select-instructions'>\n        Select a node/edge to view its data.\n      <br/>\n        (You can select multiple nodes/edges by holding down control/cmd and clicking)\n      <br/><br/>\n        Shortest network path will be highlighted in <span style={{color: '#ff6f7a'}}>pink</span>, source node will be highlighted in\n        <span style={{color: '#ff0000'}}> red</span>\n      <br/><br/>\n        Non shortest path edges will be displayed in <span style={{color: '#ffffff', backgroundColor: '#2d3436'}}>white</span> and in\n        <span style={{color: '#008ac9' }}> blue</span> when selected.\n      <hr/>\n        Or click edit below to add/modify the network JSON data.\n      <br/><br/>\n        *Note: Bellman-Ford is automatically ran on adding/modifying the network JSON data.\n      </div>\n      <button id='toggle-edit-button' onClick={toggleEditMode}>Edit JSON Data</button>\n    </div>)\n  }\n\n  const { nodes, edges } = selectedObject.data;\n\n  return (\n    <div id='selected-object-data'>\n      {renderSelectedNodeData(nodes)}\n      {renderSelectedEdges(edges)}\n    </div>\n  )\n};\n\nexport const DataPanel = ({ nodeData, edgeData, selectedObject, toggleEditMode }) => {\n  return(\n    <div id='data-panel-wrapper'>\n      {/*<div className='title'>Current Network Data</div>*/}\n      {/*{renderNetworkData(nodeData, edgeData)}*/}\n      <div className='title'>Network Info</div>\n      {renderSelectedData(nodeData, edgeData, selectedObject, toggleEditMode)}\n    </div>\n  )\n};\n\nexport default DataPanel;","import React from \"react\";\n\nconst renderHoverPanel = ({ type, id, ...data }) => {\n  if (type === 'node') {\n    return (\n      <div className='data'>\n        <div>Node ID: <span>{id}</span></div>\n        <div>Label: <span>{data.label}</span></div>\n        <div>Weight: <span>{data.weight}</span></div>\n        <div>Shortest Source: <span>{data.shortest_source} </span></div>\n      </div>\n    )\n  }\n\n  if (type === 'edge') {\n    return (\n      <div className='data'>\n        <div>Edge ID: <span>{id}</span></div>\n        <div>From: <span>{data.to}</span></div>\n        <div>To: <span>{data.to}</span></div>\n        <div>In Shortest Network: <span>{data.isPartOfShortestPath ? 'Yes' : 'No'} </span></div>\n        <div>Cost: <span>{data.cost} </span></div>\n      </div>\n    )\n  }\n};\n\nexport const HoverPanel = ({hoverData}) => {\n  if (hoverData === undefined) {\n    return null;\n  }\n\n  return (\n    <div id='hover-data-panel'>\n      {renderHoverPanel(hoverData)}\n    </div>\n  )\n};\n\nexport default HoverPanel;","const node_background = '#008ac9';\nconst node_border = '#6488db';\nconst node_highlight_bg = '#006c9e';\nconst node_highlight_border = '#ffffff';\nconst node_hover_bg = '#006c9e';\nconst node_font_color = '#ffffff';\n\nconst edge_color = '#ffffff';\nconst edge_font_color = '#ffffff';\nconst edge_highlight_color = '#008ac9';\nconst edge_hover_color = '#ffffff';\n\nconst shortest_path_color = '#ff6f7a';\n\nexport const GRAPH_OPTIONS = {\n  interaction: { hover:true, multiselect: true },\n  nodes: {\n    color: {\n      background: node_background,\n      border: node_border,\n      highlight: {\n        background: node_highlight_bg,\n        border: node_highlight_border\n      },\n      hover: node_hover_bg\n    },\n    font: {\n      size: 16,\n      color: node_font_color,\n    }\n  },\n  edges: {\n    font: {\n      color: edge_font_color,\n      size: 18\n    },\n    color: {\n      color: edge_color,\n      highlight: edge_highlight_color,\n      hover: edge_hover_color,\n    },\n    length: 200\n  },\n  physics: {\n    enabled: true,\n    hierarchicalRepulsion: {\n      nodeDistance: 400,\n      springLength: 500,\n    },\n  }\n};\n\nexport const augmentNodeDate = (nodeData) => nodeData.map(node => ({\n  ...node,\n  weight: node.is_source_node ? 0 : Infinity,\n  shortest_source: node.is_source_node ? node.label : undefined,\n  color: {\n    background: node.is_source_node ? '#ff0000' : undefined,\n    highlight: {\n      background: node.is_source_node ? '#ff0000' : undefined,\n      border: node_highlight_border\n    },\n    hover: node.is_source_node ? '#ff0000' : undefined\n  },\n}));\n\nexport const augmentEdgeData = (edgeData) => edgeData.map(edge => ({\n  ...edge,\n  id: `${edge.from}:${edge.to}`,\n  label: edge.cost.toString(),\n}));\n\nexport const highlightShortestPath = (edgeData, relaxedNode) => {\n  return edgeData.map(edge => {\n    let isPartOfShortestPath = false;\n    const destinationNode = relaxedNode.find(n => n.id === edge.to);\n    // If the destination node (to) has the same shortest_source (from) as the edge.\n    // Then this edge (to - from) is on the shortest network path.\n    if (destinationNode.shortest_source === edge.from) {\n      isPartOfShortestPath = true;\n    }\n\n    return {\n      ...edge,\n      isPartOfShortestPath,\n      color: isPartOfShortestPath ? shortest_path_color : undefined\n    }\n  })\n};\n\nexport const getNodeEdgeData = (nodeId, edgeData) => edgeData.filter(e => e.from === nodeId);\n\nexport default {\n  getNodeEdgeData,\n  augmentNodeDate,\n  augmentEdgeData,\n  highlightShortestPath,\n  GRAPH_OPTIONS\n};","/*\n  Bellman-Ford algorithm.\n  Ensure that networkData is an object of the following shape for the implementation to work\n\n  // Contains data on all the nodes in the networks\n  @param nodes = Array<node>\n    node = {\n      \"id\": String,\n      \"label\": String\n      \"weight\": Number/Infinity,\n      \"shortest_source\": String<node.id>,\n    }\n\n  @param edges = Array<edge>\n    edge = {\n      \"from\": node.id\n      \"to\": node.id,\n      \"cost\": Number\n    }\n\n    @return: Returns a new array of nodes with their updated weight and shortest path source.\n*/\nexport const bellmanFordNetwork = (nodeData, edgeData) => {\n  // Copy construct a new network to prevent mutating the original network.\n  let relaxedNodes = [ ...nodeData].map(i => ({ ...i}));\n\n  // Main algorithm loop.\n  for(let i=0; i < relaxedNodes.length - 1; i++ ) {\n    relaxedNodes.forEach(currentNode => {\n      const currentNodeEdge = edgeData.filter(e => e.from === currentNode.id);\n      if (currentNodeEdge.length > 0) {\n        currentNodeEdge.forEach(edge => {\n          const destinationNode = relaxedNodes.find(n => n.id === edge.to);\n          if (currentNode.weight + edge.cost < destinationNode.weight) {\n            destinationNode.weight = currentNode.weight + edge.cost;\n            destinationNode.shortest_source = currentNode.id;\n          }\n        })\n      }\n    });\n  }\n\n  return relaxedNodes;\n};\n\nexport default bellmanFordNetwork;","import React, { useState, useEffect } from 'react';\nimport {augmentEdgeData, augmentNodeDate, highlightShortestPath} from './graph-utils';\nimport bellmanFordNetwork from './bellman-ford-ui';\n\nconst example_node = {\n  \"nodes(1...n)\": [{\n      \"id\": \"Unique<String>\",\n      \"label\": \"<String>\",\n      \"is_source_node\": \"<Boolean>\"\n    },\n    {\n      \"id\": \"Unique<String>\",\n      \"label\": \"<String>\",\n    }]\n};\n\nconst example_edge = {\n  \"edges(1...n)\": [{\n    \"from\": \"<node.id>\",\n    \"to\": \"<node.id>\",\n    \"cost\": \"<Number>\",\n  }]\n};\n\nexport const EditPanel = ({ nodeData, edgeData, setNodeData, setEdgeData, toggleEditMode }) => {\n\n  const [ isValidJON, setIsValidJSON ]= useState(true);\n  const [ validationStatus, setValidationStatus ] = useState([\n    { id: 'nodes', name: 'Nodes array is valid', isValid: true },\n    { id: 'uniqueNodes', name: 'Nodes all have unique IDs', isValid: true },\n    { id: 'sourceNode', name: 'Contains EXACTLY ONE \"is_source_node\"', isValid: true },\n    { id: 'edges', name: 'Edges array is valid', isValid: true },\n    { id: 'toFromValid', name: 'Edges all point to/from valid nodes', isValid: true}\n  ]);\n\n  // Redundant (?)\n  useEffect(() => {\n    const JSONtextArea = document.getElementById('json-edit-textarea');\n    validateNetworkData(JSONtextArea.value);\n  }, [nodeData, edgeData]);\n\n  const networkData = {nodes: nodeData.map(n => ({\n      ...n,\n      shortest_source: undefined,\n      weight: undefined,\n      color: undefined,\n      hover: undefined\n    })), edges: edgeData.map(e => ({\n      ...e,\n      id: undefined,\n      label: undefined,\n      isPartOfShortestPath: undefined,\n      color: undefined,\n    }))};\n\n  const saveNewGraph= () => {\n    if (isValidJON && validationStatus.every(s => s.isValid)) {\n      const newJSONData = JSON.parse(document.getElementById('json-edit-textarea').value);\n      const newNodeData = augmentNodeDate(newJSONData.nodes);\n      const newEdgeData = augmentEdgeData(newJSONData.edges);\n      setNodeData(newNodeData);\n      setEdgeData(newEdgeData);\n      const bfResults = bellmanFordNetwork(newNodeData, newEdgeData);\n      setNodeData(bfResults);\n      setEdgeData(highlightShortestPath(newEdgeData, bfResults));\n    }\n  };\n\n  const validateNetworkData = (inputValue) => {\n    let newValidation = {\n      nodes: false,\n      uniqueNodes: false,\n      sourceNode: false,\n      edges: false,\n      toFromValid: false\n    };\n\n    let newJSONData;\n    try {\n      newJSONData = JSON.parse(inputValue);\n    } catch (e) {\n      console.log(`Error parsing JSON: ${e}`);\n      setIsValidJSON(newValidation.JSON);\n      return;\n    }\n\n    if (newJSONData) {\n      newValidation.JSON = true;\n\n      if (Array.isArray(newJSONData.nodes)) {\n        newValidation.nodes = true;\n\n        if (newJSONData.nodes.filter(n => n.is_source_node === true).length === 1) {\n          newValidation.sourceNode = true;\n        }\n\n        if (newJSONData.nodes.every((n, _, src) => src.filter(s => s.id === n.id).length === 1)) {\n          newValidation.uniqueNodes = true;\n        }\n\n        const newNodes = newJSONData.nodes;\n        const hasValidEdges = newJSONData.edges.every(e => {\n          return (newNodes.filter(n => n.id === e.from).length === 1 &&\n            newNodes.filter(n => n.id === e.to).length === 1)\n        });\n\n        if (hasValidEdges) {\n          newValidation.toFromValid = true;\n        }\n      }\n\n      if (Array.isArray(newJSONData.edges)) {\n        newValidation.edges = true;\n      }\n    }\n\n    setIsValidJSON(newValidation.JSON);\n    setValidationStatus(validationStatus.map(s => ({\n      ...s,\n      isValid: newValidation[s.id]\n    })));\n  };\n\n  return (\n    <div id='edit-view-wrapper'>\n      <div id='json-edit-panel'>\n        <textarea\n          id='json-edit-textarea'\n          onChange={e => validateNetworkData(e.target.value)}\n          defaultValue={JSON.stringify(networkData, undefined, 4)}\n        />\n      </div>\n      <div id='submission-panel'>\n        <div id='instructions'>\n          <div id='title'>JSON Structure Info/Example</div>\n          <div id='example'>\n            <textarea id='node-example' rows={13}>{JSON.stringify(example_node, undefined, 2)}</textarea>\n            <textarea id='edge-example'>{JSON.stringify(example_edge, undefined, 2)}</textarea>\n          </div>\n        </div>\n        <div id='validation-status'>\n          <div className='validation'>\n            <div className='validation-name'>Is JSON Valid</div>\n            <div className={`validation-status ${isValidJON ? null : 'invalid'}`}>\n              {isValidJON ? 'Ok' : 'No'}\n            </div>\n          </div>\n          {!isValidJON ? <div>\n            Please ensure JSON data is valid:\n            <ul>\n              <li>JSON key/value objects are encapsulated in double quotes.</li>\n              <li>No trailing commas (on last child objects, array elements)</li>\n              <li>Encapsulated in a parent object ('{ }') at the top level.</li>\n            </ul>\n            Click reset below to reset data back to the last valid JSON data.\n          </div> : null}\n          {isValidJON && validationStatus.map(s => (\n            <div className='validation'>\n              <div className='validation-name'>{s.name}</div>\n              <div className={`validation-status ${s.isValid ? null : 'invalid'}`}>\n                {s.isValid ? 'Ok' : 'No'}\n              </div>\n            </div>\n          ))}\n        </div>\n        <div id='submission-control'>\n          <button onClick={() => {\n            const JSONtextArea = document.getElementById('json-edit-textarea');\n            JSONtextArea.value = JSON.stringify(networkData, undefined, 4);\n            validateNetworkData(JSONtextArea.value);\n          }}>Reset</button>\n          <button id='toggle-edit-mode' onClick={toggleEditMode}>Cancel</button>\n          <button\n            id='save-new-graph'\n            onClick={saveNewGraph}\n            disabled={!isValidJON || !validationStatus.every(s => s.isValid)}\n          >\n            Save\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n};\n\nexport default EditPanel;","import React, { useState, useEffect } from \"react\";\nimport Graph from \"react-graph-vis\";\nimport DataPanel from './DataPanel';\nimport HoverPanel from './HoverPanel';\nimport EditPanel from './EditPanel';\nimport networkData from './test_data';\nimport { augmentEdgeData, augmentNodeDate, highlightShortestPath, GRAPH_OPTIONS } from './graph-utils';\nimport bellmanFordNetwork from './bellman-ford-ui';\n\nexport const App = () => {\n\n  const [ editMode, setEditMode ] = useState(true); //TODO: Switch back to false\n\n  const [nodeData, setNodeData] = useState(augmentNodeDate(networkData.nodes));\n  const [edgeData, setEdgeData] = useState(augmentEdgeData(networkData.edges));\n\n  const [selectedObject, setSelectedObject] = useState(undefined);\n  const [hoverData, setHoverData] = useState(undefined);\n\n\n  useEffect(() => {\n    const bfResults = bellmanFordNetwork(nodeData, edgeData);\n    setNodeData(bfResults);\n    setEdgeData(highlightShortestPath(edgeData, bfResults));\n  }, []);\n\n  const events = {\n    select: (event) => {\n      const { nodes, edges } = event;\n      if (nodes.length > 0 || edges.length > 0) {\n        setSelectedObject({\n          data: {\n            nodes: nodeData.filter(n => nodes.includes(n.id)),\n            edges: edgeData.filter(e => edges.includes(e.id))\n          }\n        });\n        setHoverData(undefined);\n      } else {\n        setSelectedObject(undefined);\n      }\n    },\n    hoverNode: (event) => {\n      const { node } = event;\n      const hoveredNode = nodeData.find(n => n.id === node);\n      // console.log(`Hover Node: ${JSON.stringify(hoveredNode)}`);\n      setHoverData({\n        type: 'node',\n        ...hoveredNode\n      });\n    },\n    hoverEdge: (event) => {\n      const { edge } = event;\n      const hoveredEdge = edgeData.find(e => e.id === edge);\n      // console.log(`Hover Edge: ${JSON.stringify(edge)}`);\n      setHoverData({\n        type: 'edge',\n        ...hoveredEdge\n      })\n    }\n  };\n  return (\n    <div id='app-wrapper' onMouseOver={() => {\n      setHoverData(undefined);\n    }}>\n      {editMode ?\n        <EditPanel\n          nodeData={nodeData}\n          setNodeData={setNodeData}\n          edgeData={edgeData}\n          setEdgeData={(newEdgeData) => {\n            console.log(`Saving new Edge data ${newEdgeData}`)\n            setEdgeData(newEdgeData);\n            setEditMode(!editMode);\n          }}\n          toggleEditMode={() => setEditMode(!editMode)}\n        />\n        :\n        <React.Fragment>\n          <DataPanel\n            nodeData={nodeData}\n            edgeData={edgeData}\n            selectedObject={selectedObject}\n            toggleEditMode={() => setEditMode(!editMode)}\n          />\n          <div id='graph-canvas-wrapper' >\n            <HoverPanel hoverData={hoverData} />\n            <Graph\n              graph={{ nodes: nodeData, edges: edgeData, }}\n              options={GRAPH_OPTIONS}\n              events={events}\n            />\n          </div>\n        </React.Fragment>\n      }\n\n    </div>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}